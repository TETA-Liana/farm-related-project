{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\web-cw\\\\frontend\\\\src\\\\components\\\\DashBoard\\\\Statistics\\\\LineChart\\\\LineChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from './../../../../components/Message/Message';\nimport Loader from './../../../../components/Loader/Loader';\nimport { listUsers } from './../../../../actions/userActions';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst data = {\n  labels: ['December', 'January'],\n  datasets: [{\n    label: 'Users of Months',\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: 'rgba(75,192,192,0.4)',\n    borderColor: 'rgba(75,192,192,1)',\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: 'rgba(75,192,192,1)',\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    data: [1, 4, 0, 8]\n  }]\n};\nconst LineChart = ({\n  history\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const userList = useSelector(state => state.userList);\n  const {\n    loading,\n    error\n  } = userList;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      dispatch(listUsers());\n    } else {\n      history.push('/login');\n    }\n  }, [dispatch, history, userInfo]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        marginTop: \"40px\",\n        textAlign: \"center\"\n      },\n      children: \"Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 24\n    }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true);\n};\n_s(LineChart, \"m8bxchS00E8VfeFQjMVhPEOklL8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useEffect","Line","useDispatch","useSelector","Message","Loader","listUsers","jsxDEV","_jsxDEV","Fragment","_Fragment","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","LineChart","history","_s","dispatch","userList","state","loading","error","userLogin","userInfo","isAdmin","push","children","style","marginTop","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","variant","_c","$RefreshReg$"],"sources":["C:/Users/PC/web-cw/frontend/src/components/DashBoard/Statistics/LineChart/LineChart.jsx"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from './../../../../components/Message/Message'\r\nimport Loader from './../../../../components/Loader/Loader'\r\nimport { listUsers } from './../../../../actions/userActions'\r\n\r\nconst data = {\r\n    labels: ['December', 'January'],\r\n    datasets: [\r\n        {\r\n            label: 'Users of Months',\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: [1, 4, 0, 8]\r\n        }\r\n    ]\r\n};\r\n\r\nconst LineChart = ({ history }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const { loading, error } = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n    }, [dispatch, history, userInfo])\r\n\r\n    return (\r\n        <>\r\n            <h4 style={{ marginTop: \"40px\", textAlign: \"center\" }}>Users</h4>\r\n            {loading ? <Loader />\r\n                : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Line data={data} />\r\n                    )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LineChart\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}